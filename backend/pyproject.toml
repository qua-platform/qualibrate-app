[tool.poetry]
name = "qualibrate-app"
version = "0.4.0a3"
description = ""
authors = ["Quantum Machines <info@quantum-machines.co>"]
repository = "https://github.com/qua-platform/qualibrate-app"
packages = [{ include = "qualibrate_app" }]
readme = "README.md"

include = [{ path = "qualibrate_static/**/*", format = ["sdist", "wheel"] }]

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.117.1"
uvicorn = "^0.37.0"
click = "^8.1.7,<8.2.0"
tomli = { version = "^2.0.1", python = "<3.11" }
tomli-w = "^1.0.0"
requests = "^2.32.4"
jsonpatch = "^1.33"
qualibrate-config = "^0.1.6"
# TODO: replace after publishing timeline-db
# json-timeline-database = { path = "../../json-timeline-database", optional = true, develop = true }

[tool.poetry.extras]
json-timeline-db = ["json-timeline-database"]

[tool.poetry.group.dev.dependencies]
mypy = "^1.18.2"
ruff = "^0.13.1"
poethepoet = "^0.37.0"
types-requests = "^2.32.4.20250913"

[tool.poetry.group.test.dependencies]
pytest = "^8.4.2"
pytest-mock = "^3.15.1"
httpx = "^0.28.1"

#[tool.poetry.group.qm-dev.dependencies]
#qualibrate-config = {path = "../../qualibrate-config", develop = true}

[tool.poetry.group.fe_test.dependencies]
quam = { version = "^0.4.0", python = ">=3.9,<3.13" }
xarray = "~2025.6.1"

[tool.poetry.scripts]
qualibrate-app = "qualibrate_app.__main__:main"

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
exclude = ['tests/']
plugins = ['pydantic.mypy']

[[tool.mypy.overrides]]
# TODO: add py.typed to json_timeline_database and remove from ignore imports
module = ["jsonpatch", "jsonpointer", "json_timeline_database.*"]
ignore_missing_imports = true

[tool.ruff]
line-length = 80
target-version = "py310"

[tool.ruff.lint]
extend-select = [
    "E",   # pycodestyle
    "F",   # Pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
]

[tool.ruff.lint.pycodestyle]
max-line-length = 80
max-doc-length = 80

[tool.poe.tasks]
lint = "ruff check ."
lint-fix = "ruff check --fix ."
format = "ruff format --check ."
format-fix = "ruff format ."
type = "mypy ."
check.sequence = ["lint", "format", "type"]
fix.sequence = ["lint-fix", "format-fix", "type"]
fix.ignore_fail = "return_non_zero"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
