[tool.poetry]
name = "qualibrate-app"
version = "0.2.3"
description = ""
authors = ["Quantum Machines <info@quantum-machines.co>"]
repository = "https://github.com/qua-platform/qualibrate-app"
packages = [{ include = "qualibrate_app" }]
readme = "README.md"

include = [{ path = "qualibrate_static/**/*", format = ["sdist", "wheel"] }]

[tool.poetry.dependencies]
python = "^3.9"
fastapi = "^0.115.2"
uvicorn = "^0.32.0"
pydantic-settings = "^2.1.0"
click = "^8.1.7"
tomli = { version = "^2.0.1", python = "<3.11" }
tomli-w = "^1.0.0"
requests = "^2.31.0"
jsonpatch = "^1.33"
qualibrate-runner = { version = "^0.2.2", optional = true }
# TODO: replace after publishing timeline-db
# json-timeline-database = { path = "../../json-timeline-database", optional = true, develop = true }

[tool.poetry.extras]
json-timeline-db = ["json-timeline-database"]
runner = ["qualibrate-runner"]

[tool.poetry.group.dev.dependencies]
mypy = "^1.8.0"
ruff = "^0.7.0"
types-requests = "^2.31.0.20240218"
poethepoet = "^0.25.0"

#[tool.poetry.group.qm-dev.dependencies]
#qualibrate-runner = {path = "../../qualibrate-runner", optional = true, develop = true, extras=["qualibrary"]}

[tool.poetry.group.test.dependencies]
pytest = "^8.0.0"
pytest-mock = "^3.12.0"
httpx = "^0.27.0"

[tool.poetry.scripts]
qualibrate-app = "qualibrate_app.__main__:main"

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
exclude = ['tests/']

[[tool.mypy.overrides]]
# TODO: add py.typed to json_timeline_database and remove from ignore imports
module = [
    "jsonpatch",
    "jsonpointer",
    "json_timeline_database.*",
    "qualibrate",
    "qualibrate_runner.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 80
target-version = "py39"

[tool.ruff.lint]
extend-select = [
    "E",   # pycodestyle
    "F",   # Pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
]

[tool.ruff.lint.pycodestyle]
max-line-length = 80
max-doc-length = 80

[tool.poe.tasks]
lint = "ruff check ."
lint-fix = "ruff check --fix ."
format = "ruff format --check ."
format-fix = "ruff format ."
type = "mypy ."
check.sequence = ["lint", "format", "type"]
fix.sequence = ["lint-fix", "format-fix", "type"]
fix.ignore_fail = "return_non_zero"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
